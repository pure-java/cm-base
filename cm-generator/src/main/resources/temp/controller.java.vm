#set( $entityLow = $entity.substring(0,1).toLowerCase()+$entity.substring(1) ) ##/* 首字母小写 */
package ${package.Controller};

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

import io.swagger.annotations.Api;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;
#if(${restControllerStyle})
#else
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment}前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = "$!{table.comment}")
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${table.serviceName}> {
#else
public class ${table.controllerName} {
#end
#*分页查询*#
  @ApiOperation(value = "分页查询$!{table.comment}")
  @PostMapping(value = "page${entity}")
  public Result page${entity}(@ModelAttribute PageWhere pageWhere, @ModelAttribute ${entity} ${entityLow}) {
    return Result.success(PageResult.of(super.service.page${entity}(pageWhere, ${entityLow})));
  }

#*添加或修改*#
  @ApiOperation(value = "添加$!{table.comment}")
  @PostMapping(value = "modify${entity}")
  @PreAuthorize(value = "hasAuthority('${table.entityPath}:modify${entity}')")
  public Result modify${entity}(@ModelAttribute @Valid ${entity} ${entityLow}) {
    return Result.success(super.service.saveOrUpdate${entity}(${entityLow}));
  }

#*删除*#
  @ApiOperation(value = "删除$!{table.comment}")
  @ApiImplicitParam(name = "ids", value = "要进行删除的$!{table.comment}id字符串，使用逗号分隔")
  @PostMapping(value = "remove${entity}")
  @PreAuthorize(value = "hasAuthority('${table.entityPath}:remove${entity}')")
  public Result remove${entity}(@RequestParam("ids") String ids) {
    boolean status = super.service.removeByIds(StringUtil.convertStringToId(ids, String.class));
    return Result.newInstance(status);
  }
}
#end