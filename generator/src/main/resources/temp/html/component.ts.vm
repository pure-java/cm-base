#set( $entityLow = $entity.substring(0,1).toLowerCase()+$entity.substring(1) ) ##/* 首字母小写 */
#set( $lineThrough = $MyVelocityTemplateEngine.split($entity))  #*中划线命名法*#


import {Component, OnInit} from '@angular/core';
import {FormBuilder, FormGroup} from "@angular/forms";
import {NzFormConfig} from "@entry/common/form/nz-form-config";
import {NzGridConfig} from "@entry/common/grid/nz-grid-config";
import {NzGridColConfig} from "@entry/common/grid/nz-grid-col-config";
import {NzGridRowConfig} from "@entry/common/grid/nz-grid-row-config";
import {NzTableConfig} from "@page/common/table/nz-table-config";
import {PageResult} from "@entry/common/base/page-where";
import {${entity}Service} from 'component.ts${package.ModuleName}/${lineThrough}.service';
import {${entity}} from 'component.ts${package.ModuleName}/${lineThrough}.entity';


/**
 * $!{table.comment}
 * @author ${author}
 * @since ${date}
 */
@Component({
  selector: 'app-${lineThrough}',
  templateUrl: './${lineThrough}.component.html',
  styleUrls: ['./${lineThrough}.component.css']
})
export class ${entity}Component implements OnInit {
  // 查询数据用户条件
  where${entity}Group: FormGroup = this.formBuilder.group(new ${entity}() as {});

  // 查询用户表单样式配置
  where${entity}FormConfig: NzFormConfig = new NzFormConfig()
  .setFlex(true).setLayout("inline").setFormLabelSpan(9)
  .setOffset(1).setFormControlSpan(14);

  // 查询用户grid样式配置
  where${entity}GridCfg: NzGridConfig = new NzGridConfig()
  .setRow(new NzGridRowConfig().setGutter({xs: 10, lg: 10}))
  .fillAllSpan(new NzGridColConfig().setSpan(4));

  // 配置用户表格信息
        ${entityLow}TableConfig: NzTableConfig<${entity}> = new NzTableConfig<${entity}>()
  .setNzSize("small").setNzScroll({x: "700px"});

  constructor(private ${entityLow}Service: ${entity}Service,
              private formBuilder: FormBuilder) {
  }

  ngOnInit() {
    this.pageSelect${entity}(1);
  }

  // 分页查询
  pageSelect${entity}(pageNum?: number): void {
    this.${entityLow}TableConfig.pageWhere.setPage(pageNum);
    this.${entityLow}TableConfig.setNzLoading(true).clearPageResult();
    let rawValue = this.where${entity}Group.getRawValue() as ${entity};
    let observable = this.${entityLow}Service.pageSelect${entity}(rawValue, this.${entityLow}TableConfig.pageWhere);
    observable.subscribe((data: PageResult<${entity}>) => {
      this.${entityLow}TableConfig.setPageResult(data).setNzLoading(false);
    });
  }
}
